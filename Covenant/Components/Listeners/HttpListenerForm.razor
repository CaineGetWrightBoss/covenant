@using System.IO
@using System.Threading
@using Microsoft.AspNetCore.Components.Forms

@using Covenant.Models.Listeners

<EditForm Model="Listener" OnValidSubmit="OnFormSubmit">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="Description">Description</label>
        <input id="Description" name="Description" @bind="@Listener.Description" class="form-control-plaintext" readonly>
    </div>
    <div class="form-group">
        <label for="Name">Name</label>
        <a href="#" class="tooltips-info">
            <div class="tooltiptext"> The <b>Name</b> of the listener that will be used throughout the interface. Pick something recognizable!</div>
        </a>
        <input id="Name" name="Name" @bind="@Listener.Name" disabled="@Disabled" class="form-control">
        <div class="text-danger"><ValidationMessage For="() => Listener.Name" /></div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="BindAddress">BindAddress</label>
            <a href="#" class="tooltips-info">
                <div class="tooltiptext">
                    The <b>BindAddress</b> is the local ip address that the listener will bind to. This can be helpful in cases where the Covenant host has multiple nics. Usually, this value will be <b>0.0.0.0</b>.
                </div>
            </a>
            <input id="BindAddress" name="BindAddress" @bind="@Listener.BindAddress" disabled="@Disabled" class="form-control">
            <div class="text-danger"><ValidationMessage For="() => Listener.BindAddress" /></div>
        </div>
        <div class="form-group col-md-4">
            <label for="BindPort">BindPort</label>
            <a href="#" class="tooltips-info">
                <div class="tooltiptext">
                    The <b>BindPort</b> is the local port that the listener will bind to.
                </div>
            </a>
            <input id="BindPort" name="BindPort" @bind="@Listener.BindPort" disabled="@Disabled" class="form-control" type="number">
            <div class="text-danger"><ValidationMessage For="() => Listener.BindPort" /></div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4">
            <label for="ConnectPort">ConnectPort</label>
            <a href="#" class="tooltips-info">
                <div class="tooltiptext">
                    The <b>ConnectPort</b> is the *callback* port that Grunts will be directly connecting to. This also represents the port portion of the <b>Urls</b>.
                </div>
            </a>
            <input id="ConnectPort" name="ConnectPort" @bind-value="Listener.ConnectPort" @bind-value:event="oninput" disabled="@Disabled" class="form-control" type="number">
            <div class="text-danger"><ValidationMessage For="() => Listener.ConnectPort" /></div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-4 mb-0">
            <label for="ConnectAddresses_0_">ConnectAddresses</label>
            <a href="#" class="tooltips-info">
                <div class="tooltiptext"> 
                    The <b>ConnectAddresses</b> are the <b>callback</b> addresses, and represents the hostname portion of the <b>Url</b>. You must specify at least one <b>ConnectAddress</b> and can specify as many as you would like. You can specify multiple <b>ConnectAddresses</b> for failure prevention. Grunts will attempt to connect to each of these <b>ConnectAddresses</b> and will use the first one that succeeds. If you are using redirectors, this should be the url that points to the external redirector.
                </div>
            </a>
        </div>
        <div class="form-group col-md-4 mb-0">
            <label for="Urls_0_">Urls</label>
            <a href="#" class="tooltips-info">
                <div class="tooltiptext">
                    The <b>Urls</b> are the <b>callback</b> URLs, and are the urls that Grunts will be directly connecting to. The URLs are calculated based on a combination of the <b>ConnectAddresses</b>, <b>BindPort</b>, and <b>UseSSL</b> values, and should be of the form: <b>http(s)://connectaddress:bindport</b>. The <b>Urls</b> are calculated for you, you should not need to manually edit these values.
                </div>
            </a>
        </div>
    </div>
    @for (int i = 0; i < Listener.ConnectAddresses.Count; i++)
    {
        int number = i;
        <div class="form-row">
            <div class="form-group col-md-4">
                <input id=@("ConnectAddresses_" + number + "_") name=@("ConnectAddresses[" + number + "]") @bind-value="Listener.ConnectAddresses[number]" @bind-value:event="oninput" disabled="@Disabled" class="form-control">
            </div>
            <div class="form-group col-md-4">
                <input id="Urls_i_" name="Urls[i]" value="@Listener.Urls[number]" class="form-control" readonly>
            </div>
            @if (number != 0 && !Disabled)
            {
                <div class="col-auto align-self-center">
                    <button type="button" @onclick="(e => RemoveRow(number))" class="btn btn-outline-danger btn-sm">
                        <span class="fe fe-x"></span>
                    </button>
                </div>
            }
        </div>
    }
    <div class="text-danger"><ValidationMessage For="() => Listener.ConnectAddresses" /></div>
    <div class="text-danger"><ValidationMessage For="() => Listener.Urls" /></div>
    @if (!Disabled)
    {
        <button type="button" @onclick="AddRow" class="btn btn-outline-primary btn-sm mt-2 mb-4">
            <span class="fe fe-plus"></span> Add
        </button>
    }

    <div class="form-row">
        <div class="form-group col-md-3">
            <label for="UseSSL">UseSSL</label>
            <a href="#" class="tooltips-info">
                <div class="tooltiptext">
                    The <b>UseSSL</b> value determines if the listener should use the HTTPS or HTTP protocol. If <b>UseSSL</b> value is true, an <b>SSLCertificate</b> needs to be provided.
                </div>
            </a>
            <select id="UseSSL" name="UseSSL" @onchange="(e => UpdateUseSSL(e))" disabled="@Disabled" class="form-control form-control-sm">
                @if (Listener.UseSSL)
                {
                    <option selected value="True">True</option>
                    <option value="False">False</option>
                }
                else
                {
                    <option selected value="False">False</option>
                    <option value="True">True</option>
                }
            </select>
            <div class="text-danger"><ValidationMessage For="() => Listener.UseSSL" /></div>
        </div>

        @if (!Disabled)
        {
            <div class="form-group col-md-3 cert-div" hidden="@(!Listener.UseSSL)">
                <label for="SSLCertificateFile">SSLCertificate</label>
                <InputFile id="SSLCertificateFile" name="SSLCertificateFile" class="form-control-file"
                           OnChange="FileUpload" />
                @if (this.UploadInProgress)
                {
                    <span class="fe fe-loader spin"></span>
                }
                @if (string.IsNullOrEmpty(this.ErrorMessage))
                {
                    <span class="text-danger">@ErrorMessage</span>
                }
            </div>
        }

        <div class="form-group col-md-6 cert-div" hidden="@(!Listener.UseSSL)">
            <label for="SSLCertificatePassword">SSLCertificatePassword</label>
            <input id="SSLCertificatePassword" name="SSLCertificatePassword"
                   @bind="Listener.SSLCertificatePassword" disabled="@Disabled" class="form-control form-control-sm">
            <div class="text-danger"><ValidationMessage For="() => Listener.SSLCertificatePassword" /></div>
        </div>
    </div>
    <div class="form-group">
        <label for="ProfileId">HttpProfile</label>
        <a href="#" class="tooltips-info">
            <div class="tooltiptext">
                The <b>HttpProfile</b> determines the behavior of Grunt and Listener communication.    
            </div>
        </a>
        <select id="ProfileId" name="ProfileId" @bind="Listener.ProfileId" class="form-control">
            @foreach (var Profile in Profiles)
            {
                <option value="@Profile.Id">@Profile.Name</option>
            }
        </select>
        <div class="text-danger"><ValidationMessage For="() => Listener.ProfileId" /></div>
    </div>
    @ChildContent
</EditForm>

@code {
    [Parameter]
    public HttpListener Listener { get; set; }

    [Parameter]
    public IEnumerable<Profile> Profiles { get; set; }

    [Parameter]
    public EventCallback<HttpListener> OnSubmit { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    private SemaphoreSlim UploadSemaphore { get; set; } = new SemaphoreSlim(1, 1);
    private bool UploadInProgress { get; set; } = false;

    private void UpdateRow(int row, ChangeEventArgs e)
    {
        Listener.ConnectAddresses[row] = e.Value.ToString();
    }

    private void AddRow()
    {
        Listener.ConnectAddresses.Add("");
    }

    private void RemoveRow(int row)
    {
        Listener.ConnectAddresses.RemoveAt(row);
    }

    private void UpdateUseSSL(ChangeEventArgs e)
    {
        if (bool.TryParse(e.Value.ToString(), out bool result))
        {
            Listener.UseSSL = result;
        }
    }

    private string ErrorMessage { get; set; }
    private async Task FileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            await UploadSemaphore.WaitAsync();
            this.UploadInProgress = true;
            this.StateHasChanged();
            using (MemoryStream ms = new MemoryStream())
            {
                await e.File.OpenReadStream().CopyToAsync(ms);
                Listener.SSLCertificate = Convert.ToBase64String(ms.ToArray());
            }
        }
        catch (Exception ex)
        {
            this.ErrorMessage = ex.Message;
        }
        this.UploadInProgress = false;
        this.StateHasChanged();
        UploadSemaphore.Release();
    }

    private async Task OnFormSubmit()
    {
        await this.OnSubmit.InvokeAsync(this.Listener);
    }
}
