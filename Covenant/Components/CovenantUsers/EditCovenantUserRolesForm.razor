@inherits OwningComponentBase<ICovenantService>

@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Forms
@using Covenant.Core
@using Covenant.Models.Covenant
@inject IJSRuntime IJSRuntime

<EditForm Model="CovenantUser" OnSubmit="OnSubmit">
    <div class="form-group">
        <label for="Roles">Edit Roles</label><br />
        <select name="Roles" id="Roles" class="selectpicker show-menu-arrow" multiple data-dropup-auto="false" data-width="auto" data-live-search="true" data-selected-text-format="count > 2">
            @foreach (var role in Roles)
            {
                @if (UserInRole(CovenantUser, role.Id))
                {
                    <option selected value="@role.Id">@role.Name</option>
                }
                else
                {
                    <option value="@role.Id">@role.Name</option>
                }
            }
        </select>
    </div>
    <button type="submit" class="btn btn-primary">
        <span class="fe fe-edit"></span> Edit Roles
    </button>
</EditForm>

@code {
        [Parameter]
        public CovenantUser CovenantUser { get; set; }

        [Parameter]
        public EventCallback<IEnumerable<IdentityRole>> OnChangeRoles { get; set; }

    private IEnumerable<IdentityRole> Roles { get; set; }
    private IdentityRole AdministratorRole { get; set; }


    protected override async Task OnInitializedAsync()
    {
        AdministratorRole = await Service.GetRoleByName("Administrator");
        var roles = await Service.GetRoles();
        Roles = FilterRoles(roles);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await IJSRuntime.InvokeAsync<string>("InitializeSelectPicker", "#Roles.selectpicker");
    }

    private bool UserInRole(CovenantUser user, string role)
    {
        try
        {
            Service.GetUserRole(user.Id, role).WaitTask();
            return true;
        }
        catch (Exception)
        {
            return false;
        }
    }

    public IEnumerable<IdentityRole> FilterRoles(IEnumerable<IdentityRole> roles)
    {
        if (!UserInRole(CovenantUser, AdministratorRole.Id))
        {
            return roles.Where(role => role.Id != AdministratorRole.Id);
        }
        return roles;
    }

    private async Task<IEnumerable<IdentityRole>> GetSelectedRoles()
    {
        string[] ids = await IJSRuntime.InvokeAsync<string[]>("GetValue", new object[] { "#Roles" });
        var filteredRoles = FilterRoles(ids.Select(id => Service.GetRole(id).WaitResult()));
        return filteredRoles;
    }

    private async Task OnSubmit()
    {
        await OnChangeRoles.InvokeAsync(await GetSelectedRoles());
    }
}
